---
layout: default
title: Parrot YAML ain't machine language
---

<p>
In the last weeks I have used some off-work hours for looking into Abstract Syntax Tree for Parrot. It looks like this is one of the less civilised areas of Parrot, as documentation is somewhat scarce.
</p><p>
Leo T&#246;tsch added support for AST when coding for the infamous Piethon bet. So far one can take a Python program and turn it into PAST, Parro abstract syntax tree As Simple Text.</p><blockquote><div><p> <tt>bernhard@linux:~/devel/Parrot/parrot/languages/python&gt; cat hello_10.py<br>print 10;<br>bernhard@linux:~/devel/Parrot/parrot/languages/python&gt;<nobr> <wbr></nobr>./ast2past.py hello_10.py &gt; hello_10.past<br>bernhard@linux:~/devel/Parrot/parrot/languages/python&gt; more hello_10.past<br> <br># generated by ast2past.py on Sun Nov 28 16:06:29 2004<br> <br>Parrot_AST(<br>&nbsp; version(Const('0.1'))<br> _options(<br> ) # _options<br> Src_File("hello_10.py")<br> Py_Module(<br>&nbsp; _()<br>&nbsp; Stmts(<br>&nbsp; &nbsp;Py_Print(<br>&nbsp; &nbsp; Const(10)<br>&nbsp; &nbsp;) # Py_Print<br>&nbsp; &nbsp;Py_Print_nl()<br>&nbsp; &nbsp;Void(<br>&nbsp; &nbsp; Const(None)<br>&nbsp; &nbsp;) # Void<br>&nbsp; ) # Stmts<br> ) # Py_Module<br> # end<br>) # Parrot_AST<br>bernhard@linux:~/devel/Parrot/parrot/languages/python&gt;<nobr> <wbr></nobr>../../parrot hello_10.past<br>10</tt></p>
